all-groups: cut -d: -f1 /etc/group | sort

ag: ag --color-match "1;36"

awatch: watch $(alf which $@)

be: bundle exec

beep: echo -e '\a'

cachemem: cat /sys/fs/cgroup/memory/memory.stat |grep cache
  flush: !sudo sysctl vm.drop_caches=3

cats: highlight --line-numbers --line-number-length=3 --line-length=75 --wrap-simple --wrap-no-numbers --out-format=ansi --force

cdc: cd ./$1

cert-refresh: sudo update-ca-certificates --fresh 

clean: sudo apt autoremove && sudo apt clean && sudo apt autoclean && gem clean && sudo journalctl --vacuum-time=3d && rm -rf ~/.cache && d clean
  hard: --volumes

compare-dir: diff --brief -Nr 

# Count files in folder. Folder name is optional
count: ls -1 ${1:-.} | wc -l

d: docker
  ps: ps --format "{{.ID}} {{.Names}}\t{{.Status}}  {{.Ports}}"
  clean: system prune -f
  deploy: stack deploy -c $1.yml $1
  i: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
  images: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}"
  m: !docker-machine
  machine: !docker-machine
  n: network
  rmi: images --format "{{.Repository}}:{{.Tag}}" |grep $1 | xargs docker rmi -f
  rmv: volume ls --format "{{.Name}}" |grep $1 |xargs docker volume rm -f
  r: run -it --rm 
  replicas: service ls --format='table {{.Name}}\t{{.Mode}}\t{{.Replicas}}'
  s: service
  st: stack
  size: images --format '{{.Size}}\t{{.Repository}}:{{.Tag}}' | sort -h | column -t
  stats: stats --format "{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
  v: volume

dc: docker-compose
  r: run --rm
  ci: -f.ci/docker-compose.yml
  ls: config --services
  upd: up -d
  deploy: !docker stack deploy -c docker-compose.yml

dclf: dc logs -f

dcr: dc r

decrypt: gpg2 -d

dfh: df -h |grep sd

dirfind: sudo find . -maxdepth ${2:-3} -type d -name "*$1*"

dm: docker-machine

dns: host -t ${2:-ns} $1
  flush: !sudo systemd-resolve --flush-caches
  stats: !sudo systemd-resolve --statistics
  --flush: !dns flush && dns
  help: !echo -e "Usage:\n  dns example.com\n  dns example.com mx\n  dns --flush example.com\n  dns flush\n  dns stats"

dps: d ps
dpsa: d ps -a

# docker swarm
ds: 
  build: docker-compose -f $1.yml build
  deploy: docker stack deploy -c $1.yml $1
  launch: ds ls |xargs -L1 -i docker stack deploy -c {}.yml {}
  # list / deploy / stop all (based on ls *.yml)
  logs: docker service logs
  ls: ls -1 *.yml | sed -e 's/\..*$//'
  status: docker stack ls && echo ----- && docker service ls --format 'table {{.Name}}\t{{.Replicas}}'
  stop: docker stack rm $1
  terminate: ds ls |xargs -L1 docker stack rm
  watch: watch -n5 "docker service ls --format 'table {{.Name}}\t{{.Replicas}}'"

dush: sudo du -sh

encrypt: gpg2 -c

f: find |grep

fingerprint: ssh-keygen -E md5 -lf

g: git
  s: status
  l: log --all --graph --date=relative --pretty=format:'%h %Cgreen%ad%Creset %Cblue%an%Creset%n        %s%n       %C(auto)%d%Creset'
  ll: log --graph --oneline --decorate --all
  tail: log -${1:-5} --all --date=relative --pretty=format:'%h %Cgreen%ad%Creset %x09%Cblue%s%Creset'
  c: add . --all && git commit -am
  p: push
  m: merge
  b: branch
  d: diff
  co: checkout
  cb: checkout -b
  pl: pull
  ls: ls-tree --full-name --name-only -r HEAD
  chmod: update-index --chmod 
  compare: diff --stat --color $1..HEAD
  datelog: log --pretty=format:'%h %ad%x09%an%x09%s' --date=short
  discard: checkout -- . ; git clean -fd
  history: log -p
  optimize: repack -ad && sleep 2 && git gc
  remote-delete: push origin --delete
  rebuild: commit --allow-empty -m "trigger rebuild" ; git push
  rename: branch -m
  resolve-ours: checkout --ours . ; git add -u ; git commit -m 'resolve conflicts with --ours'
  resolve-theirs: checkout --theirs . ; git add -u ; git commit -m 'resolve conflicts with --theirs'
  rollback: diff --binary HEAD $1 | git apply
  shallow-clone: clone --depth 1
  upstream: checkout master && git fetch upstream && git merge upstream/master

  # show age of all git repos in subdirectories
  age: !for d in ./*/; do echo -e "\n\e[34m$d\e[0m" ; git -C $d log -1 --all --date=relative --pretty=format:'%Cgreen%ad%Creset %x09%s%n' ; done;

gg: g p
ggt: gg && gg --tag
gpl: g pl

geoip: curl http://api.db-ip.com/v2/free/$1

# GitHub API - example usage: github /user/repos
github: curl -H "Authorization: token $GITHUB_ACCESS_TOKEN" https://api.github.com$1

hk: heroku

https: http ${@:1:$((${#@}-1))} https://${@: -1}

inst: sudo apt install
uninst: sudo apt remove

jenkins-log: http $JENKINS_JOB_URL/$1/lastBuild/consoleText |grep -vE "(Pipeline| > git)" |less

# Create animated gif - delay parameter is optional
jpg2gif: convert -delay ${1:-300} -loop 0 *.jpg animated.gif

killport: [[ $(lsof -ti:$1) ]] && kill -9 $(lsof -ti:$1)

kl: kubectl
klg: kubectl get

l: ls -lh
ll: ls -lah

less: less -S

myip: ifconfig |head -n2 |sed -rn 's/.*addr:([^ ]+) .*/\1/p'

now-update: echo downloading... && curl -s https://api.github.com/repos/zeit

nv: env |grep -i

# List installed perl modules
perlmod: perl -MFile::Find=find -MFile::Spec::Functions -Tlwe 'find { wanted => sub { print canonpath $_ if /\.pm\z/ }, no_chdir => 1 }, @INC'

# Create animated gif - delay parameter is optional
png2gif: convert -delay ${1:-300} -loop 0 *.png animated.gif

port: sudo lsof -i :$1

ports: sudo netstat -tulpn | grep LISTEN |grep -Po '(?<=:)(\d{2,5})' |sort -n  |uniq |tr '\n' '\t'

psf: ps -ef |grep 

pt: papertrail

py: python3

redis: redis-cli

# repeat 5 echo hello
repeat: for i in `seq $1`; do ${@:2} ; done

runas: sudo su -s /bin/sh $1 -c "$2"

sad: ssh-add

senderscore: echo $1 | awk -F . '{print $4"."$3"."$2"."$1".score.senderscore.com"}' | xargs -I{} dig a {} +short | xargs -I{} echo {} | cut -d . -f 4

slim: slimrb --pretty

slurp: wget --recursive --no-clobber --level=${2:-10} --page-requisites --adjust-extension --convert-links --restrict-file-names=windows --no-parent http://$1

ssh-testkey: ssh-keygen -t rsa -C "bobbo@henna.com" -f id_rsa -N ''

sslyze: docker run --rm -it nablac0d3/sslyze

syslog: sudo grc tail -f /var/log/syslog

tracert: sudo traceroute -I 

uml: java -jar /vagrant/java/plantuml/plantuml.jar

update: sudo apt update && sudo apt upgrade && sudo apt autoremove

ver: lsb_release -drc

what: alf which

y2mp3: youtube-dl --extract-audio --audio-format mp3 "$@"

vir: vi -R

