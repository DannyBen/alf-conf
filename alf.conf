#a

all-groups: cut -d: -f1 /etc/group | sort

ag: ag --color-match "1;36"

### install from local .deb package
# apt-deb: sudo apt-get -yf install "./$1"

awatch: watch $(alf which $@)

#b

be: bundle exec
beep: echo -e '\a'
binlink: sudo ln -fs "$(realpath $1)" "/usr/local/bin/$1"
bo: bundle outdated
bore: docker run -it --init --rm --network host ekzhang/bore
brun: bundle exec run
bu: bundle update && bundle outdated

#c

cachemem: cat /sys/fs/cgroup/memory/memory.stat |grep cache
  flush: !sudo sysctl vm.drop_caches=3

cidr: sipcalc

# List TLS information for a domain
ciphers: nmap --script ssl-enum-ciphers -p 443

# cd to next/prev sibling
cdnext: cd ../"$(ls -F .. | grep '/' | grep -A1 -xF "${PWD##*/}/" | tail -n 1)"
cdprev: cd ../"$(ls -F .. | grep '/' | grep -B1 -xF "${PWD##*/}/" | head -n 1)"

cert-refresh: sudo update-ca-certificates --fresh 

# clean: sudo apt autoremove && sudo apt clean && sudo apt autoclean && (yes | gem clean) && sudo journalctl --vacuum-time=3d && rm -rf ~/.cache && d clean
clean: sudo pacman -Sc --noconfirm && (yes | gem clean) && sudo journalctl --vacuum-time=3d && rm -rf ~/.cache && d clean
  hard: --volumes

cloudflare-tunnel: cloudflared tunnel --config /vagrant/config/cloudflare/config.yml run local

cls: cd && clear

codeclimate: docker run --rm -it -e CODECLIMATE_CODE=$PWD -e CODECLIMATE_DEBUG -v $PWD:/code -v /var/run/docker.sock:/var/run/docker.sock -v /tmp/cc:/tmp/cc codeclimate/codeclimate "$@"

compare-dir: diff --brief -Nr 

# Count files in folder. Folder name is optional
count: find ${1:-.} -type f | wc -l

# Count files of a given extension in subfolders
countof: find . -name "*.$1" | wc -l

ctop: ctop -i

#d

d: docker
  b: build -t ${1:-temp} .
  clean: system prune -f
  df: system df --format "table {{.Type}}\t{{.TotalCount}}\t{{.Size}}\t{{.Reclaimable}}"
  i: images --format "table {{.Repository}}\t{{.Tag}}\t{{.Size}}\t{{.ID}}"
  m: !docker-machine
  n: network
  ps: ps --format "{{.ID}} {{.Names}}\t{{.Status}}  {{.Ports}}"
  r: run -it --rm 
  replicas: service ls --format='table {{.Name}}\t{{.Mode}}\t{{.Replicas}}'
  rmi: images --format "{{.Repository}}:{{.Tag}}" |grep $1 | xargs docker rmi -f
  rmv: volume ls --format "{{.Name}}" |grep $1 |xargs docker volume rm -f
  s: service
  size: images --format '{{.Size}}\t{{.Repository}}:{{.Tag}}' | sort -h | column -t
  st: stack
  stats: stats --format "{{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}"
  unzip: load -i $1.tar.gz
  v: volume
  vls: volume ls | grep -i
  zip: save $1 | gzip > $2.tar.gz

dc: docker compose
  edit: !$EDITOR docker-compose.yml
  show: !less docker-compose.yml
  b: build
  bv: build --progress=plain
  r: run --rm
  ls: config --services
  lf: logs -f
  upd: up -d

dcr: dc r

decrypt: gpg2 -d "$1" > "$(basename "$1" .gpg)"
  forget: !echo RELOADAGENT | gpg-connect-agent

dfh: df -h |grep 'Filesystem\|/$'

diagram: dot "$1" -Tpng -o "${1%.dot}.png"
  watch: !filewatcher '*.dot' 'dot "$FILENAME" -Tpng -o "${FILENAME%.dot}.png"'

dif: diff -u --color

dirfind: sudo find . -maxdepth ${2:-3} -type d -name "*$1*"

dns: if [[ -n "$2" ]]; then host -t $2 $1; else host $1; fi
  flush: !sudo systemd-resolve --flush-caches
  stats: !sudo systemd-resolve --statistics
  --flush: !dns flush && dns
  help: !echo -e "Usage:\n  dns example.com\n  dns example.com mx\n  dns --flush example.com\n  dns flush\n  dns stats"

# Show pixel size and DPI of an image
dpi: identify -units PixelsPerInch -format "Pixels: %w x %h\nDPI:    %x x %y"

dps: d ps
dpsa: d ps -a

dush: sudo du -sh
dushall: for d in /*/ ; do ! [[ "$d" =~ ^/(proc|vagrant)/$ ]] && sudo du -sh "$d" ; done

#e

encrypt: gpg2 -c

envenc: gpg2 -c .envrc && rm .envrc && echo 'OK'
envdec: gpg2 -o .envrc -d .envrc.gpg && rm .envrc.gpg && echo 'OK'

est: TZ=EST date

#f

f: find |grep
fd: fd --hidden --exclude .git

# find content in files with extension: findin yaml analytics
findin: fd --unrestricted .$1\$ |ack -x "$2" ${@:3}
fingerprint: ssh-keygen -E md5 -lf
fonts: !
  ls: fc-list
  reload: fc-cache -f -v
  install: sudo cp -r $1 /usr/share/fonts/truetype/
  help: !echo -e "Usage:\n  fonts ls              # show list of fonts\n  fonts reload          # refresh cache after installing new fonts\n  fonts install dejavu  # copy the ./dejavu dir to the system fonts dir"

#g

g: git
  # basic
  b: branch
  c: add . --all && git commit -am
  d: diff --unified=0
  m: merge
  p: push
  s: status
  co: checkout
  pl: pull

  # commonly used
  cl: changelog
  tags: tag --sort v:refname
  new: checkout -b
  del: branch -d
  chmod: update-index --chmod 
  retag: tag $1 -f && (git push origin --delete $1 || true) && git push origin $1
  discard: checkout -- . ; git clean -fd
  remote-delete: push origin --delete
  touch: commit --allow-empty -m "touch" ; git push
  rename: branch -m
  rollback: diff --binary HEAD $1 | git apply
  unstash: stash pop
  checkout-pr: fetch origin pull/$1/head:pr/$1 && git checkout pr/$1

  ### [OBSOLETE] mark current directory as safe unless already marked
  # safe: ! (git config --global -l |grep "safe.directory=$(pwd -P)$") || (git config --global --add safe.directory "$(pwd -P)" && echo added "$(pwd -P)")
  
  ### [OBSOLETE] mark all subdirectories that are repos as safe unless already marked
  # safeall: ! find "$(pwd)" -type d -name .git -exec sh -c 'cd "$(dirname "{}")" && (git config --global -l | grep "safe.directory=$(pwd -P)$" || (git config --global --add safe.directory "$(pwd -P)" && echo added "$(pwd -P)"))' \;

  # log related
  l: log --all --graph --date=relative --pretty=format:'%h %Cgreen%ad%Creset %Cblue%an%Creset%n        %s%n       %C(auto)%d%Creset'
  ll: log --graph --oneline --decorate --all
  tail: log -${1:-5} --all --date=relative --pretty=format:'%h %Cgreen%ad%Creset %x09%Cblue%s%Creset'
  datelog: log --pretty=format:'%C(cyan)%h %C(magenta)%ad %C(blue)%an%Creset%x09%s' --date=short
  history: log -p
  
  # less commonly used
  ls: ls-tree --full-name --name-only -r HEAD
  compare: diff --stat --color $1..HEAD
  # optimize: repack -ad && sleep 4 && git gc --aggressive --prune=now
  resolve-ours: checkout --ours . ; git add -u ; git commit -m 'resolve conflicts with --ours'
  resolve-theirs: checkout --theirs . ; git add -u ; git commit -m 'resolve conflicts with --theirs'
  shallow-clone: clone --depth 1
  tagsha: show-ref --abbrev=7 --tags
  sha: rev-parse --short HEAD
  diff-list: diff --name-status "${1:-master}"
  stats: diff --shortstat
  unstage: restore --staged
  
  # git add-upstream user/repo
  add-upstream: remote add upstream https://github.com/$1.git
  fetch-upstream: checkout master && git fetch upstream && git merge upstream/master

  # show age of all git repos in subdirectories
  age: !for d in ./*/; do echo -e "\n\e[34m$d\e[0m" ; git -C $d log -1 --all --date=relative --pretty=format:'%Cgreen%ad%Creset %x09%s%n' ; done;

gg: g p
ggt: gg && gg --tag
gpl: g pl
ggc: g c "$*" && gg

geoip: curl http://ip-api.com/line/$1

# GitHub API - example usage: github /user/repos
github: curl -H "Authorization: token $GITHUB_ACCESS_TOKEN" https://api.github.com$1

# add self to group $1
groupme: sudo usermod -aG "$1" "$(whoami)" && groups

#h

hawk: filewatcher -I "$1" "./$1"

hist: !
  del: for ((i = 1 ; i <= ${1:-1} ; i++)); do echo "clearing line $(($HISTCMD-2)): $(history -p \!$(($HISTCMD-2)))"; history -d $(($HISTCMD-2)); done; history -d $(($HISTCMD-1))
  pause: set +o history
  resume: set -o history

https: http ${@:1:$((${#@}-1))} https://${@: -1}

#i

# implode files to one: implode indir glob outfile
implode: find "$1" -name "$2" -print0 |xargs -0 -I file cat file > "$3"

# get files from ipfs
ipfsget: wget "https://ipfs.io/ipfs/$1"

#j

# Create animated gif - delay parameter is optional
jpg2gif: convert -delay ${1:-300} -loop 0 *.jpg animated.gif

jqless: jq -C |less

#k

killport: [[ $(lsof -ti:$1) ]] && kill -9 $(lsof -ti:$1)

#l

l: ls -lh
ll: ls -lah
less: less -Sr

# create or show manual timestamped log
log: if [[ "$1" == "" ]]; then cat log.log 2> /dev/null; else echo -e "$(date) : $*" >> log.log ; cat log.log; fi

#m

manlocal: cat "$1" | man -l
mdman: pandoc -f markdown-smart -s --to man "$1" | man -l
md2man: pandoc -f markdown-smart -s --to man "$1"
mem: watch free -h

# run a git command in all direct subdirectories
mgit: find -maxdepth 1 -mindepth 1 -type d -exec echo -e "\n=== {}" \; -exec git -C "{}" "$@" \;

monitor: gotop -l minimal

mongo-server: (docker stop mongo ; docker rm mongo) 2> /dev/null ; docker run -d --name mongo -p 27017:27017 -v global_mongo:/data/db mongo
  stop: !docker stop mongo 2> /dev/null ; docker rm mongo 2> /dev/null

murder: sudo pkill -9
myip: dig +short myip.opendns.com @resolver1.opendns.com
  internal: ! hostname -I | awk '{print $1}'

#n

nameserver: systemd-resolve --status |head -n3
network: sudo lshw -class network -short
nikto: docker run --rm -it -v "$PWD:/out" --network host dannyben/nikto "$@"
nv: env |grep -i

#o

# outdated: apt list --upgradable

#p

# Pipe any command to a pager and preserve colors
page: unbuffer "$@" |most

# List installed perl modules
perlmod: perl -MFile::Find=find -MFile::Spec::Functions -Tlwe 'find { wanted => sub { print canonpath $_ if /\.pm\z/ }, no_chdir => 1 }, @INC'

# Encrypt a PDF: pdfenc <password> <file>
pdfenc: if [[ $# -ne 2 ]]; then echo "usage: pdfenc <password> <file>"; else qpdf --encrypt "$1" "$1" 256 -- "$2" "$(basename "$2" ".pdf")-enc.pdf"; fi

# Arch pacman
pm: sudo pacman
  update: -Syu
  add: -S
  rm: -Rs
  ls: -Qe
  info: -Si
  search: -Ss
  # provides: -Fy
  provides: !pkgfile -b
  # browse local packages
  index: -Qq | fzf --preview 'pacman -Qil {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'
  # browse remote packages
  browse: -Slq | fzf --preview 'pacman -Si {}' --layout=reverse --bind 'enter:execute(pacman -Qil {} | less)'

# Create animated gif - delay parameter is optional
png2gif: convert -delay ${1:-300} -loop 0 *.png animated.gif

# Create mp4 from png sequence - framerate parameter is optional
png2mp4: ffmpeg -framerate ${1:-5} -pattern_type glob -i '*.png' -c:v libx264 -pix_fmt yuv420p out.mp4

png2pdf: convert -units PixelsPerInch "$1" -density 300 "$(basename $1 .png).pdf"

port: sudo lsof -i :$1

# ports: show open ports
# ports -v: show with process name
ports: sudo netstat -tulpn |grep LISTEN |grep -Po '(?<=:)(\d{2,5})' |sort -n  |uniq |tr '\n' '\t'
  -v: !sudo netstat -tulpn |grep LISTEN |perl -ne 'print "$1\t$2\n" if /.*:(\d{2,5}).*\/(\w+)/' |sort -n| uniq

psf: ps -ef |grep 

pt: papertrail
ppt: PAPERTRAIL_API_TOKEN=$PERSONAL_PAPERTRAIL_API_TOKEN pt

py: python3

#r

rbenv-doctor: curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash

rd: radio vote && radio download current

restart: sudo service "$1" restart

rcop: rubocop
  server: !if [[ "$1" == "stop" ]]; then rubocop --stop-server; else rubocop --start-server; fi
  update: !gem install $(gem list rubocop | grep -oP '^(.*?)\s')
  fix: --autocorrect
  todo: --regenerate-todo
  docs: --show-docs-url
  only: --only

redis: redis-cli
redis-docker: (docker stop redis ; docker rm redis) 2> /dev/null ; docker run -d --name redis --rm -it -p 6379:6379 redis
  stop: !docker stop redis 2> /dev/null ; docker rm redis 2> /dev/null

# Convert the last N history commands to a bash script named ./redo
# usage: redo 10
redo: echo "#!/usr/bin/env bash" > redo && history $(($1 + 1)) | cut -c 8- | head -n -1 >> redo && cat redo

# Show information about a github repo - usage: repo-info user/repo
repo-info: curl -s https://api.github.com/repos/$1 | jq '{name: .full_name, forks: .forks_count, stars: .stargazers_count, watchers: .watchers_count, issues: .open_issues_count, subscribers: .subscribers_count}'

# Run rspec only on the files updated in the last N minutes [default: 10]
# usage: respec N
# respec: m="${1:-10}" && echo -e "\n\e[33mrespec: $m minutes\e[0m" && bundle exec rspec $((find -name '*_spec.rb' -mmin -$m | grep .) || echo "-tnothing")

runas: sudo su -s /bin/sh $1 -c "$2"

rsvg: rsvg-convert

#s

sad: ssh-add

# record a screencast to gif (requires asciinema + agg)
screencast: rm -f cast.json && asciinema rec cast.json && agg --font-size 20 cast.json cast.gif

search: grep -ri

secret: openssl rand -hex ${1:-64}

senderscore: echo $1 | awk -F . '{print $4"."$3"."$2"."$1".score.senderscore.com"}' | xargs -I{} dig a {} +short | xargs -I{} echo {} | cut -d . -f 4

# shortcut: test -e "$HOME/shortcuts/${1:-$(basename "$PWD")}" || ln -s "$PWD" "$HOME/shortcuts/${1:-$(basename "$PWD")}"

slim: slimrb --pretty

slurp: wget --recursive --no-clobber --level=${2:-10} --page-requisites --adjust-extension --convert-links --restrict-file-names=windows --no-parent http://$1

sshconf: vi ~/.ssh/config

# mount/unmount folders by sshfs
# usage: ssh-mount server:/path [local-path]
# usage: ssh-unmount [local-path]
ssh-mount: dir="${2:-./mount}" && mkdir -p "$dir" && sshfs "$1" "$dir" && echo "mounted in $dir"
ssh-unmount: dir="${1:-./mount}" && fusermount -u "$dir" && rmdir "$dir"

ssh-testkey: ssh-keygen -t rsa -C "bobbo@henna.com" -f id_rsa -N ''

sslyze: docker run --rm -it nablac0d3/sslyze

stop: sudo systemctl stop "$1"
start: sudo systemctl start "$1"

# The ImageMagick convert method has issues (and also needs inkscape installed)
# svg2png: convert -background none "$1" "$(basename $1 .svg).png"
# The inkscape convert method does not work with masks
# svg2png: inkscape "$1" -e "$(basename "$1" .svg).png" 2> /dev/null

# usage: svg2png SVGFILE [WIDTH]
svg2png: if [[ "$2" == "" ]]; then rsvg-convert "$1" > "$1.png"; else rsvg-convert -w $2 "$1" > "$1.png"; fi

syslog: sudo grc tail -f /var/log/syslog

#t

testssl: docker run --rm -ti  drwetter/testssl.sh

# tracert: sudo traceroute -I 
tracert: mtr

triplet: gcc -dumpmachine

# touch files modified within the last 10 minutes ($1)
touches: fd --changed-within ${1:-10m} --exec-batch touch

# start http tunnel
# usage: tunnel server [local-port remote-port]
tunnel: echo "localhost:${2:-3000} => $1:${3:-80}" ; ssh -nNT -L 0.0.0.0:${2:-3000}:localhost:${3:-80} $1

#u

uml: java -jar /vagrant/java/plantuml/plantuml.jar

# update: sudo apt update -y && sudo apt upgrade -y && sudo apt autoremove -y

#v

ver: cat /etc/os-release
vir: vi -R

#w

what: alf which
wiki: wikipedia2text
wsh: readlink /proc/$$/exe

# open any command in a new tmux window or pane
ww: tmux new-window
ws: tmux split-window

#y

y2mp3: youtube-dl --extract-audio --audio-format mp3 "$@"
ytop: ytop --colorscheme default-dark
 

# caps

GET: http GET
POST: http POST
PUT: http POST
PURGE: http PURGE
HEAD: http -h

